resources:
  containers:
  - container: node8-typescript
    image: mcr.microsoft.com/azure-pipelines/node8-typescript

variables:
  sampleRoot: containers/samples/node8-typescript/TypeScript-Node-Starter

jobs:
- job: 'Build_in_node8_typescript_and_copy_to_deployment_container'
  container: node8-typescript
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - script: |
      node --version && npm --version && tsc --version
      docker --version
      ls -la /usr/local/bin/kubectl
      kubectl version -c
    displayName: Check container prereqs

  - task: Npm@1
    displayName: 'npm install'
    inputs:
      workingDir: $(sampleRoot)
      verbose: false

  - task: Npm@1
    displayName: 'npm run build'
    inputs:
      command: custom
      customCommand: 'run build'
      workingDir: $(sampleRoot)
      verbose: false

  - script: |
      echo "Copying built output (dist folder) into container (pseudo-Docker-multistage)"
      sudo docker build -t sample/typescript-node:single -f $(sampleRoot)/Dockerfile.singlestage $(sampleRoot)
    displayName: Build container artifact

  - script: |
      echo "Checking docker images on host (pseudo Docker-multistage)"
      sudo docker images
    displayName: Check docker images

- job: 'In_node8_typescript_build_Docker_multistage'
  container: node8-typescript
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - script: |
      echo "Building in one command (real Docker-multistage, from container)"
      sudo docker build -t sample/typescript-node:multi -f $(sampleRoot)/Dockerfile.multistage $(sampleRoot)
    displayName: Build from Dockerfile

  - script: |
      echo "Checking docker images on host (pseudo Docker-multistage)"
      sudo docker images
    displayName: Check docker images

- job: 'On_host_build_Docker_multistage'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - script: |
      echo "Building in one command (real Docker-multistage, from host)"
      docker build -t sample/typescript-node:multi -f $(sampleRoot)/Dockerfile.multistage $(sampleRoot)
    displayName: Build from Dockerfile

  - script: |
      echo "Checking docker images on host (real Dockermultistage, from host)"
      docker images
    displayName: Check docker images
